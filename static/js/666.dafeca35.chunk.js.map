{"version":3,"file":"static/js/666.dafeca35.chunk.js","mappings":"2OAiBaA,EAAQC,EAAAA,GAAAA,GAAH,sVAKPC,EAAAA,GAEAC,EAAAA,GAAAA,OAMAA,EAAAA,GAAAA,SAOEC,EAAUH,EAAAA,GAAAA,GAAH,uSACTE,EAAAA,GAAAA,OA7Bc,GACC,GAsCfA,EAAAA,GAAAA,QAnCe,GACC,IAyCdE,EAAOJ,EAAAA,GAAAA,GAAH,6YAGNE,EAAAA,GAAAA,OA/CiB,EADF,GADD,GACC,GAqDFG,EAAAA,GAQbH,EAAAA,GAAAA,QAxDkB,EADF,GADD,GACC,IAgEdI,EAAON,EAAAA,GAAAA,QAAH,wJAKDO,EAAAA,IAKHC,EAAYR,EAAAA,GAAAA,IAAH,oNAMXE,EAAAA,GAAAA,OAMAA,EAAAA,GAAAA,SAOEO,EAAcT,EAAAA,GAAAA,IAAH,0kBAYXC,EAAAA,GAEAC,EAAAA,GAAAA,QAYAQ,EAAAA,GAEAR,EAAAA,GAAAA,S,mBC1HAS,EAAe,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1CC,GAAWC,EAAAA,EAAAA,MACHC,GAAeC,EAAAA,EAAAA,MAArBC,KAER,OACE,iCACE,SAACpB,EAAD,UAAQc,KACR,SAACV,EAAD,UACGS,GACCA,EAAWQ,KACT,YAA0D,IAAvDC,EAAsD,EAAtDA,GAAIC,EAAkD,EAAlDA,YAAaT,EAAqC,EAArCA,MAAOU,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACjCC,EAAM,gDACVH,QADU,IACVA,EAAAA,EAdO,oCAgBT,EAAsBC,EAAaG,MAAM,KAAlCC,GAAP,eACMC,EAAQd,EAAaG,EAAYO,GAEvC,OACE,SAACpB,EAAD,WACE,SAAC,KAAD,CAAMyB,GAAE,YAAeC,MAAO,CAAEC,KAAMhB,GAAtC,UACE,UAACT,EAAD,YACE,SAACE,EAAD,WACE,gBAAKwB,IAAKP,EAAQQ,IAAKpB,OAGzB,UAACJ,EAAD,YACE,wBAAKI,KACL,iCAAOe,EAAP,cAAkBD,cATfN,EAed,QAKZ,ECnDYa,EAA4B,SAACjB,EAAYkB,GACpD,GAAKlB,EAAL,CAEA,IAAMmB,EAASnB,EAAWoB,OACvBC,QAAO,gBAAGjB,EAAH,EAAGA,GAAH,OAAYc,EAAYI,SAASlB,EAAjC,IACPD,KAAI,qBAAGoB,IAAH,IAEP,OAAKJ,EAAOK,OACRL,EAAOK,OAAS,EAAS,GAAN,OAAUL,EAAOM,MAAM,EAAG,GAAGC,KAAK,MAAlC,QAEhBP,EAAOO,KAAK,MAHQ,WANJ,CAUxB,ECmBD,EAtBiB,WACf,IAAcC,GAAkBC,EAAAA,EAAAA,IAAqB,KAA7C1B,KACM2B,GAAiBC,EAAAA,EAAAA,IAAoB,KAA3C5B,KAIR,OACE,iCACE,SAACR,EAAD,CACEC,WAAYgC,GAAiBA,EAAcI,QAC3CnC,MAAM,2BACNC,aAAcoB,KAEhB,SAACvB,EAAD,CACEC,WAAYkC,GAAgBA,EAAaE,QACzCnC,MAAM,0BACNC,aAAcoB,MAIrB,C","sources":["components/MovieGallery.styled.js","components/MovieGallery.jsx","helpers/helpers.js","pages/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  blackColor,\n  device,\n  redColor,\n  shadow,\n  transition,\n} from 'utils/variables.styled';\n\nconst gapGridTopTablet = 23;\nconst gapGridLeftTablet = 18;\nconst numberOfCardsTablet = 3;\n\nconst gapGridTopDesktop = 30;\nconst gapGridLeftDesktop = 20;\nconst numberOfCardsDesktop = 4;\n\nexport const Title = styled.h2`\n  margin-bottom: 10px;\n  font-size: 17px;\n  line-height: calc(19 / 17);\n  font-weight: 500;\n  color: ${blackColor};\n\n  @media ${device.tablet} {\n    margin-bottom: 12px;\n    font-size: 21px;\n    line-height: calc(24 / 21);\n  }\n\n  @media ${device.desktop} {\n    margin-bottom: 15px;\n    font-size: 26px;\n    line-height: calc(30 / 26);\n  }\n`;\n\nexport const CardSet = styled.ul`\n  @media ${device.tablet} {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n\n    margin-top: -${gapGridTopTablet}px;\n    margin-left: -${gapGridLeftTablet}px;\n    margin-bottom: 35px;\n  }\n\n  @media ${device.desktop} {\n    margin-top: -${gapGridTopDesktop}px;\n    margin-left: -${gapGridLeftDesktop}px;\n    margin-bottom: 50px;\n  }\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 30px;\n\n  @media ${device.tablet} {\n    flex-basis: calc(100% / ${numberOfCardsTablet} - ${gapGridLeftTablet}px);\n    margin-top: ${gapGridTopTablet}px;\n    margin-left: ${gapGridLeftTablet}px;\n    margin-bottom: 0px;\n    transition: scale ${transition};\n    cursor: pointer;\n\n    &:hover {\n      scale: 1.007;\n    }\n  }\n\n  @media ${device.desktop} {\n    flex-basis: calc(100% / ${numberOfCardsDesktop} - ${gapGridLeftDesktop}px);\n    margin-top: ${gapGridTopDesktop}px;\n    margin-left: ${gapGridLeftDesktop}px;\n  }\n`;\n\nexport const Card = styled.article`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  box-shadow: ${shadow};\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const CardThumb = styled.div`\n  position: relative;\n  & img {\n    height: 660px;\n  }\n\n  @media ${device.tablet} {\n    & img {\n      height: 346px;\n    }\n  }\n\n  @media ${device.desktop} {\n    & img {\n      height: 445px;\n    }\n  }\n`;\n\nexport const CardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex-grow: 1;\n  padding: 10px;\n\n  & h2 {\n    font-size: 12px;\n    font-weight: 500;\n    text-transform: uppercase;\n\n    color: ${blackColor};\n\n    @media ${device.desktop} {\n      font-size: 16px;\n      font-weight: 500;\n      line-height: calc(19 / 16);\n    }\n  }\n\n  & p {\n    font-size: 12px;\n    font-weight: 500;\n    line-height: calc(16 / 12);\n\n    color: ${redColor};\n\n    @media ${device.desktop} {\n      font-size: 16px;\n      font-weight: 500;\n      line-height: calc(19 / 16);\n    }\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport {\n  Card,\n  CardContent,\n  CardSet,\n  CardThumb,\n  Item,\n  Title,\n} from './MovieGallery.styled';\nimport { useGetGenresListQuery } from 'redux/moviesSlice';\n\nconst imgPlaceholder = '/dykOcAqI01Fci5cKQW3bEUrPWwU.jpg';\n\nexport const MovieGallery = ({ dataMovies, title, createGenres }) => {\n  const location = useLocation();\n  const { data: genresList } = useGetGenresListQuery();\n\n  return (\n    <>\n      <Title>{title}</Title>\n      <CardSet>\n        {dataMovies &&\n          dataMovies.map(\n            ({ id, poster_path, title, release_date, genre_ids }) => {\n              const poster = `https://image.tmdb.org/t/p/w500${\n                poster_path ?? imgPlaceholder\n              }`;\n              const [yearRelease] = release_date.split('-');\n              const genre = createGenres(genresList, genre_ids);\n\n              return (\n                <Item key={id}>\n                  <Link to={`movies/id`} state={{ from: location }}>\n                    <Card>\n                      <CardThumb>\n                        <img src={poster} alt={title} />\n                      </CardThumb>\n\n                      <CardContent>\n                        <h2>{title}</h2>\n                        <p>{`${genre} | ${yearRelease}`}</p>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                </Item>\n              );\n            }\n          )}\n      </CardSet>\n    </>\n  );\n};\n","export const createGenresForTrendMovie = (genresList, genresMovie) => {\n  if (!genresList) return;\n\n  const result = genresList.genres\n    .filter(({ id }) => genresMovie.includes(id))\n    .map(({ name }) => name);\n\n  if (!result.length) return 'No genres';\n  if (result.length > 2) return `${result.slice(0, 2).join(', ')} ...`;\n\n  return result.join(', ');\n};\n","import { MovieGallery } from 'components/MovieGallery';\nimport { createGenresForTrendMovie } from 'helpers/helpers';\nimport {\n  // useGetMovieByIdQuery,\n  useGetTrendDayQuery,\n  useGetTrendWeekQuery,\n} from 'redux/moviesSlice';\n\nconst HomePage = () => {\n  const { data: dataTrendWeek } = useGetTrendWeekQuery('1');\n  const { data: dataTrendDay } = useGetTrendDayQuery('1');\n  // const { data: dataMovieById } = useGetMovieByIdQuery('872585');\n  // console.log('dataMovieById :>> ', dataMovieById);\n\n  return (\n    <>\n      <MovieGallery\n        dataMovies={dataTrendWeek && dataTrendWeek.results}\n        title=\"Popular film of the week\"\n        createGenres={createGenresForTrendMovie}\n      />\n      <MovieGallery\n        dataMovies={dataTrendDay && dataTrendDay.results}\n        title=\"Popular film of the Day\"\n        createGenres={createGenresForTrendMovie}\n      />\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["Title","styled","blackColor","device","CardSet","Item","transition","Card","shadow","CardThumb","CardContent","redColor","MovieGallery","dataMovies","title","createGenres","location","useLocation","genresList","useGetGenresListQuery","data","map","id","poster_path","release_date","genre_ids","poster","split","yearRelease","genre","to","state","from","src","alt","createGenresForTrendMovie","genresMovie","result","genres","filter","includes","name","length","slice","join","dataTrendWeek","useGetTrendWeekQuery","dataTrendDay","useGetTrendDayQuery","results"],"sourceRoot":""}